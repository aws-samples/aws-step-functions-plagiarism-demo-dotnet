# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31
Description: >
  Developing with Step Functions Demo application. Scenario - University students caught plagiarising on exams 
  and assignments are asked required to take exams to test that know how to reference properly. 
  Students get three attempts before action is taken. This demo uses exposes an AWS Step Function via an Amazon API Gateway. 
  The step-function definition invokes tasks via AWS Lambda (.NET 8), that store results in Amazon DynamoDB. 
  Notifications are implemented via Amazon SNS and AWS X-Ray provides distributed tracing capability.

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - ES4000 # Rule disabled because the CatchAll Rule doesn't need a DLQ
        - ES6000 # Rule disabled because SQS DLQs don't need a RedrivePolicy
        - WS2001 # Rule disabled because check does not support !ToJsonString transform
        - ES1001 # Rule disabled because our Lambda functions don't need DestinationConfig.OnFailure

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  
  ToEmail:
    Type: String
    Description: Student email (testing only)

  StudentTestingCentreUrl:
    Default: "http://localhost:3000"
    Type: String
    Description: Endpoint for the Testing Centre website


Conditions:
  IsProd: !Equals [!Ref Stage, Prod]
  
Mappings:
  LogsRetentionPeriodMap:
    local:
      Days: 3
    dev:
      Days: 3
    prod:
      Days: 14

# Globals
Globals:


  Function:
    Runtime: dotnet8
    Timeout: 15
    MemorySize: 512
    Architectures:
      - x86_64
    Tracing: Active
    Environment:
      Variables:
        TABLE_NAME: !Ref IncidentsTable
        SERVICE_NAMESPACE: "Plagiarism"
        POWERTOOLS_LOGGER_CASE: "PascalCase"
        POWERTOOLS_SERVICE_NAME: "Plagiarism"
        POWERTOOLS_TRACE_DISABLED: "false" # Explicitly disables tracing, default
        POWERTOOLS_LOGGER_LOG_EVENT: "true" # Logs incoming event, default
        POWERTOOLS_LOGGER_SAMPLE_RATE: "0" # Debug log sampling percentage, default
        POWERTOOLS_METRICS_NAMESPACE: "Plagiarism"
        POWERTOOLS_LOG_LEVEL: INFO # Log level for Logger (INFO, DEBUG, etc.), default
        LOG_LEVEL: INFO # Log level for Logger

Resources:
  
  #### Lambda functions

  ScheduleExamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: DevelopingWithDotNetStepFunctions - Schedules the  Exam for the student to complete.
      CodeUri: ./ScheduleExamTask
      Handler: ScheduleExamTask::ScheduleExamTask.Function::FunctionHandler
      Role: !Sub ${IncidentsTableAccessRole.Arn}
      LoggingConfig:
        LogGroup: !Ref PlagiarismFunctionLogGroup
  
  ResolveIncidentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: DevelopingWithDotNetStepFunctions - Marks the  incident as resolved.
      CodeUri: ./ResolveIncidentTask
      Handler: ResolveIncidentTask::ResolveIncidentTask.Function::FunctionHandler
      Role: !Sub ${IncidentsTableAccessRole.Arn}
      LoggingConfig:
        LogGroup: !Ref PlagiarismFunctionLogGroup

  TakeAdministrativeActionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: DevelopingWithDotNetStepFunctions - Send email to administrative staff to notify staff that the student has failed all tests and action needs to be taken.
      CodeUri: ./AdminActionTask/
      Handler: AdminActionTask::AdminActionTask.Function::FunctionHandler
      Role: !Sub ${IncidentsTableAccessRole.Arn}
      LoggingConfig:
        LogGroup: !Ref PlagiarismFunctionLogGroup

  SubmitExamTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: DevelopingWithDotNetStepFunctions - Saves the test results and invokes the callback to the SendExamNotification state in the Step Function
      CodeUri: ./SubmitExamTask
      Handler: SubmitExamTask::SubmitExamTask.Function::FunctionHandler
      Role: !Sub ${IncidentsTableAccessRole.Arn}
      LoggingConfig:
        LogGroup: !Ref PlagiarismFunctionLogGroup
      Events:
        StepApi:
          Type: Api
          Properties:
            Path: /exam
            Method: post
            RestApiId: !Ref PlagiarismApi
  
  # API GW Cloudwatch Log Group
  PlagiarismFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !FindInMap [ LogsRetentionPeriodMap, !Ref Stage, Days ]
  
  # API Gateway
  PlagiarismApi:
    Type: AWS::Serverless::Api
    DependsOn: PlagiarismApiGwAccountConfig
    Properties:
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      # More info about OpenApiVersion: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html#sam-api-openapiversion
      OpenApiVersion: 3.0.1
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      MethodSettings:
          - MetricsEnabled: true
            ResourcePath: /*
            HttpMethod: "*"
            LoggingLevel: !If [ IsProd, ERROR, INFO ]
            ThrottlingBurstLimit: 10
            ThrottlingRateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt PlagiarismApiLogGroup.Arn
        Format: !ToJsonString
          requestId: $context.requestId
          integration-error: $context.integration.error
          integration-status: $context.integration.status
          integration-latency: $context.integration.latency
          integration-requestId: $context.integration.requestId
          integration-integrationStatus: $context.integration.integrationStatus
          response-latency: $context.responseLatency
          status: $context.status
      DefinitionBody: !Transform
        Name: "AWS::Include"
        Parameters:
          Location: "./api.yaml"
          
  # API GW Cloudwatch Log Group
  PlagiarismApiLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !FindInMap [ LogsRetentionPeriodMap, !Ref Stage, Days ]
      
  # API Gateway Account Configuration, to enable Logs to be sent to CloudWatch
  PlagiarismApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt PlagiarismApiGwAccountConfigRole.Arn

  # API GW IAM roles
  PlagiarismApiGwAccountConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  
  # Step function
  # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  PlagiarismStateMachine:
    Type: "AWS::Serverless::StateMachine"
    Properties:
      Name: !Ref AWS::StackName
      DefinitionUri: state-machine.asl.yaml
      Tracing:
        Enabled: true
      DefinitionSubstitutions:
        ScheduleExamFunctionArn: !GetAtt ScheduleExamFunction.Arn
        TakeAdministrativeActionFunctionArn: !GetAtt TakeAdministrativeActionFunction.Arn
        ResolveIncidentFunctionArn: !GetAtt ResolveIncidentFunction.Arn
        NotificationTopic: !Ref PlagiarismTopic
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ScheduleExamFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TakeAdministrativeActionFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ResolveIncidentFunction
        - DynamoDBWritePolicy:
            TableName: !Ref IncidentsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PlagiarismTopic.TopicName  
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
                - cloudwatch:PutMetricData
              Resource: "*"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt PlagiarismStateMachineLogGroup.Arn
        Level: ALL
        IncludeExecutionData: true

  # Store PlagiarismStateMachineLogGroup workflow execution logs
  PlagiarismStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/states/${AWS::StackName}-PlagiarismStateMachine"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  # SNS Topic to use in Step Functions
  PlagiarismTopic:
    Type: AWS::SNS::Topic

  # Email subscription for topic
  PlagiarismSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref ToEmail
      Protocol: email
      TopicArn: !Ref PlagiarismTopic

  # DynamoDB 
  IncidentsTable:
    Type: AWS::Serverless::SimpleTable
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      TableName: !Ref AWS::StackName
      PrimaryKey:
        Name: IncidentId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  #   IAM roles
  ApiGatewayStepFunctionsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowApiGatewayServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
      Policies:
        - PolicyName: "CallStepFunctions"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Ref PlagiarismStateMachine

  IncidentsTableAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "AllowCRUDOperationsOnDynamoDB"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                Resource:
                  - !Sub ${IncidentsTable.Arn}
        - PolicyName: "AllowStatesActions"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - 'states:SendTaskSuccess'
                  - 'states:SendTaskFailure'
                  - 'states:SendTaskHeartbeat'
                Resource:
                  - "*"
Outputs:
  StepFunctionsAPIUrl:
    Description: API URL
    Value: !Sub "https://${PlagiarismApi}.execute-api.${AWS::Region}.amazonaws.com/v2"

  StepFunctionsStateMachine:
    Description: Step Functions State Machine ARN
    Value: !Ref PlagiarismStateMachine

  ScheduleExamFunctionArn:
    Description: Schedule Exam Function ARN
    Value: !GetAtt ScheduleExamFunction.Arn
  
  SubmitExamTaskFunctionArn:
    Description: Submit Exam Function Function ARN
    Value: !GetAtt SubmitExamTaskFunction.Arn

  ResolveIncidentFunctionArn:
    Description: Resolve Incident Function ARN
    Value: !GetAtt ResolveIncidentFunction.Arn

  TakeAdministrativeActionFunctionArn:
    Description: Take Administrative Action Function ARN
    Value: !GetAtt TakeAdministrativeActionFunction.Arn
